class Activity
{
    protected string _startingMessage;
    protected string _endingMessage;
    protected string _description;

    protected static void DurationTimer(int duration)
    {
        int milliseconds = duration * 1000;
        Thread.Sleep(milliseconds);
    }
    protected static void Spinner(int duration)
    {
        string[] spinner = { "|", "/", "―", "\\" };
        int milliseconds = duration * 1000;
        int interval = 50;
        int index = 0;
        int count = 0;
        while (count < milliseconds)
        {
            Console.Write(spinner[index]);
            Thread.Sleep(interval);
            Console.Write("\b \b");
            index++;
            if (index == spinner.Length)
            {
                index = 0;
            }
            count += interval;
        }
    }

    // Concept for the ProgressBar method generated by GitHub Copilot. Character changes and interval calculation added by myself.
    protected static void ProgressBar(int duration, bool invert)
    {
        int totalWidth = Console.WindowWidth - 1; // Total width of the console line

        // Calc interval based on duration and total witdh (finds the ms interval needed to update each box at a time)
        // Typically only around 37ms for a 5 second duration depending on console size.
        int interval = (duration * 1000) / totalWidth; 

        var stopwatch = System.Diagnostics.Stopwatch.StartNew(); // Generated by GitHub Copilot

        for (int i = 0; i <= totalWidth; i++)
        {
            int boxes = i;
            int totalBoxes = totalWidth;

            string progressBar;
            if (invert)
            {
                progressBar = new string('■', boxes).PadLeft(totalBoxes / 2 + boxes / 2, '□').PadRight(totalBoxes, '□');
            }
            else
            {
                progressBar = new string('■', totalBoxes - boxes).PadLeft(totalBoxes - boxes / 2, '□').PadRight(totalBoxes, '□');
            }

            Console.Write("\r" + progressBar);

            // Calculate the remaining time to sleep to maintain the correct interval
            // Stopwatch generated by GitHub Copilot
            int elapsedMilliseconds = (int)stopwatch.ElapsedMilliseconds;
            int targetMilliseconds = (i + 1) * interval;
            int sleepTime = targetMilliseconds - elapsedMilliseconds;

            if (sleepTime > 0)
            {
                Thread.Sleep(sleepTime);
            }
        }
        Console.WriteLine();
    }   
    protected void DisplayStartDetails()
    {
        Console.WriteLine(_startingMessage);
        Console.WriteLine(_description);
    }
}