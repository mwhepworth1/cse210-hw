using Microsoft.Toolkit.Uwp.Notifications;
using Windows.UI.Notifications;
using System;
using System.Collections.Generic;
using Windows.Media.Protection.PlayReady;

/*

Instructions for installing and running this app:
    1. Install the Newtonsoft.Json NuGet package.
        "dotnet add package Newtonsoft.Json --version 13.0.3"
    2. Install the Microsoft.Toolkit.Uwp.Notifications NuGet package.
        "dotnet add package Microsoft.Toolkit.Uwp.Notifications --version 7.1.3"
    3. Ensure you have a Windows SDK installed. This is required for the UWP Notifications package.
        Open run and type "C:\Program Files (x86)\Windows Kits\10\Lib" to check if you have the Windows SDK installed.
        Look for a folder named "10.0.22621.0" or similar. If you don't have this folder, you will need to install the Windows SDK.
        To install the Windows SDK, go here: https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/
        Optionally, you can install the Windows 11 SDK via Visual Studio Installer.
    4. Run the application, there should be no errors.

*/

/*
    AI STATEMENT

    This project utilizes GitHub Copilot, which leverages GPT-4o and Anthropic's Claude 3.5 Sonnet LLMs, to assist in generating complex parts of the code. 
    Specifically, the following areas have been generated or significantly influenced by AI:

    1. Utilities.cs: The entire `Utilities.cs` file, including methods for API requests and timer utilities, was generated by GitHub Copilot using GPT-4o.
    2. Timer Functionality: The `TimerUtility` class and its methods for setting timeouts were generated by GitHub Copilot using GPT-4o.
    3. Assignment Update Logic: The logic for detecting changes in assignments and sending toast notifications was generated by GitHub Copilot using GPT-4o.

    Outside of the areas mentioned above, the code in this project is not AI-generated unless explicitly marked with a comment indicating AI assistance. 
    All other methods and lines of code have been written by hand. Resources available online via Microsoft and StackOverflow were used for reference and guidance.

    AI generated code has been reviewed and, in some cases, commented for understanding.
*/

/*
    Canvas Connect
    Written By: Matthew Hepworth
    For: Programming with Classes, CSE 210.
    Last Updated: 12/10/2024
*/
class Program
{
    private static List<Course> courses = new();
    private static List<Settings> settings = new();

    static async Task Main(string[] args)
    {

        Console.Clear();

        string res;
        bool stop = false;
        bool initalized = false;
        do 
        {

            if (initalized)
            {
                Console.Clear();
                Console.WriteLine("============================================");
                Console.WriteLine("         Welcome to Canvas Connect.         ");
                Console.WriteLine("============================================");
            }
            else
            {
                initalized = true;
                Console.Clear();
                Console.WriteLine("============================================");
                Console.WriteLine("         Welcome to Canvas Connect.         ");
                Console.WriteLine("============================================");
                // Check to see if there is an API key in the file
                if (!File.Exists("apikey.json"))
                {
                    Console.WriteLine("API key not found. Please link your account to continue.");
                }
                else
                {
                    string key = File.ReadAllText("apikey.json");
                    ApiResponse response = await Utilities.CanvasAPI("get", "https://byui.instructure.com/api/v1/courses");

                    if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)
                    {
                        // Console.WriteLine("Failed to connect to Canvas API. Please check your API key.");
                        Toast notification = new Toast("Canvas Connect", 5000, "Failed to connect to Canvas API. Please check your API key in apikey.json", "CSE210", "Programming With Classes");
                        notification.Send();
                    }
                    else
                    {
                        // Console.WriteLine("============================================");
                        // Console.WriteLine("     Successfully Connected to Canvas.      ");
                        // Console.WriteLine("============================================");
                        Toast notification = new Toast("Canvas Connect", 5000, "Successfully connected to Canvas API.", "CSE210", "Programming With Classes");
                        notification.Send();
                    }
                    await FetchAPIData(); // Fetch Courses and Assignment Data
                    // bool saved = SaveCourseData();
                    // if (!saved)
                    // {
                    //     // Generated by GitHub Copilot using GPT 4o
                    //     // Exit the program if the course data fails to save
                    //     Environment.Exit(1);
                    // }
                }

            }

            foreach (Course course in courses)
            {
                Settings setting = settings.Find(s => s.GetCanvasCourseCode() == course.GetCanvasCode());
                if (setting == null)
                {
                    Settings newSetting = new Settings(course.GetCanvasCode());
                    settings.Add(newSetting);
                    // SetTimeout function created by GitHub Copilot using GPT-4o. Multiple prompts were used to get to this point.
                    // The function is used to update assignments for each course based on the refresh interval set in the settings.
                    TimerUtility.SetTimeout<Task<bool>>(async task => await newSetting.UpdateAssignments(course), null, newSetting.GetRefreshInterval() * 60000);
                }
                else
                {
                    settings.Add(setting);
                    TimerUtility.SetTimeout<Task<bool>>(async task => await setting.UpdateAssignments(course), null, setting.GetRefreshInterval() * 60000);
                }
            }

            Console.WriteLine("Please choose one of the following options:");
            Console.WriteLine("    1. Link Account");
            Console.WriteLine("    2. View Calendar");
            Console.WriteLine("    3. Settings");
            Console.WriteLine("    4. Quit");

            res = Console.ReadLine();

            switch (res)
            {
                case "1":
                    await LinkAccount();
                    break;
                case "2":
                    Console.Clear();
                    List<Assignment> assignments = new();
                    foreach (Course course in courses)
                    {
                        List<Assignment> courseAssignments = course.GetAssignments();
                        foreach (Assignment assignment in courseAssignments)
                        {
                            assignments.Add(assignment);
                        }
                    }
                    
                    // Line below generated by GitHub Copilot using GPT-4o
                    assignments.Sort((a, b) => a.GetDueDate().CompareTo(b.GetDueDate()));
                    Calendar calendar = new Calendar(DateTime.Now, assignments); // Reassigning cal item if date change takes place.
                    calendar.Display();
                    break;
                case "3":
                    SettingsOptions();
                    break;
                case "4":
                case "q":
                case "quit":
                    stop = true;
                    break;
                case "toast":
                    Toast toast = new Toast("Test", 555555, "This is a test message", "CSE210", "Programming With Classes");
                    toast.Send();
                    break;

            }
        } while (!stop);
    }
    private static async Task LinkAccount()
    {
        string res;
        do
        {
            Console.Clear();
            string[] lines = [  "********************************************************************",
                                "To link your account, you will need to enter your Canvas API key.",
                                "To obtain your key, please follow the instructions below:",
                                "    1. Log in to your Canvas account.",
                                "    2. Click on Account in the left-hand menu.",
                                "    3. Click on Settings.",
                                "    4. Scroll down to the Approved Integrations section.",
                                "    5. Click on the New Access Token button.",
                                "    6. Enter a name for your token and click Generate Token.",
                                "    7. Copy the token and paste it below.",
                                "********************************************************************"];
            foreach (string line in lines)
            {
                Console.WriteLine(line);
            }
            Console.Write("Paste your Canvas API key here: ");
            string key = Console.ReadLine();

            using (StreamWriter writer = new StreamWriter("apikey.json"))
            {
                writer.WriteLine($"{{\"key\": \"{key}\"}}");
            }

            // Test the API connection
            ApiResponse response = await Utilities.CanvasAPI("get", "https://byui.instructure.com/api/v1/courses");

            if (response != null && response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                Console.WriteLine("API key linked successfully.");
            }
            else
            {
                Console.WriteLine("Failed to link API key. Please check the key and try again.");
            }

            Console.WriteLine("Press enter to return to the main menu...");
            res = Console.ReadLine();
        } while (res != "");
    }

    private static async Task<bool> FetchAPIData()
    {
        string coursesUri = "https://byui.instructure.com/api/v1/courses?enrollment_type=student&enrollment_state=active&state=available&include[]=total_scores&include[]=term&per_page=100";
        string assignmentsUriTemplate = "https://byui.instructure.com/api/v1/courses/{{course_id}}/assignments?include[]=submission&include[]=total_scores&order_by=due_date&bucket=upcoming&per_page=100";

        ApiResponse coursesResponse = await Utilities.CanvasAPI("get", coursesUri);
        if (coursesResponse != null && coursesResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            dynamic coursesData = Newtonsoft.Json.JsonConvert.DeserializeObject(coursesResponse.Body);
            foreach (var course in coursesData)
            {
                string instructor = "Instructor Name"; // Placeholder   
                bool hasEnded = false;
                bool isOnline = course.account_id == 44;

                courses.Add(new Course($"{course.name}", instructor, $"{course.term.name}", $"{course.course_code}", $"{course.id}", hasEnded, isOnline));
            }

            foreach (Course course in courses)
            {
                string assignmentsUri = assignmentsUriTemplate.Replace("{{course_id}}", course.GetCanvasCode());
                ApiResponse assignmentsResponse = await Utilities.CanvasAPI("get", assignmentsUri);
                if (assignmentsResponse != null && assignmentsResponse.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    dynamic assignmentsData = Newtonsoft.Json.JsonConvert.DeserializeObject(assignmentsResponse.Body);
                    foreach (var assignment in assignmentsData)
                    {
                        if (assignment.quiz_id != null)
                        {
                            // treat this as a quiz, not an assignment
                        }
                        else
                        {
                            DateTime unlockAt = assignment.unlock_at != null ? DateTime.Parse((string)assignment.unlock_at) : DateTime.Now;
                            DateTime lockAt = assignment.lock_at != null ? DateTime.Parse((string)assignment.lock_at) : new DateTime(2099, 12, 31);
                            DateTime dueDate = DateTime.Parse((string)assignment.due_at);
                            string name = assignment.name;
                            int points = assignment.points_possible;
                            int allowedAttempts = assignment.allowed_attempts;

                            Assignment newAssignment = new Assignment(name, points, dueDate, allowedAttempts, unlockAt, lockAt);
                            course.AddAssignment(newAssignment);
                        }
                    }
                }
                else
                {
                    Console.WriteLine($"Failed to fetch assignment data for course {course.GetCourseCode()}");
                    return false;
                }
            }
            return true;
        }
        else
        {
            Console.WriteLine("Failed to fetch course data.");
            return false;
        }
    }
    
    private static void SettingsOptions()
    {
        string res;
        do
        {
            Console.Clear();
            Console.WriteLine("============================================");
            Console.WriteLine("                Settings Menu               ");
            Console.WriteLine("============================================");
            Console.WriteLine("Please select a course:");
            for (int i = 0; i < courses.Count; i++)
            {
                Console.WriteLine($"    {i + 1}. {courses[i].GetName()}");
            }
            Console.WriteLine("press enter to go back to the main menu");

            if (courses.Count == 0)
            {
                Console.WriteLine("No courses found. Please link your account to continue.");
                res = "";
                break;
            }

            if (settings.Count == 0)
            {
                foreach (Course course in courses)
                {
                    settings.Add(new Settings(course.GetCanvasCode()));
                }
            }

            res = Console.ReadLine();
            if (res == "")
            {
                break;
            }
            if (int.Parse(res) > courses.Count)
            {
                Console.WriteLine("Invalid option. Please try again.");
                Thread.Sleep(1500);
                continue;
            }
            Course c = courses[int.Parse(res) - 1];
            Settings active = null;
            foreach (Settings s in settings)
            {
                if (s.GetCanvasCourseCode() == c.GetCanvasCode())
                {
                    active = s;
                    break;
                }
            }
            if (active == null) {
                active = new Settings(c.GetCanvasCode());
            }

            string res2;
            do
            {
                Console.Clear();
                Console.WriteLine("============================================");
                Console.WriteLine($"Settings for {c.GetName()}");
                Console.WriteLine("============================================");
                Console.WriteLine("    1. Notifications | " + (active.GetNotificationsEnabled() ? "Enabled" : "Disabled"));
                Console.WriteLine("    2. Refresh Interval | " + active.GetRefreshInterval() + " minutes");
                Console.WriteLine("    3. Show in Calendar | " + (active.GetShowInCalendar() ? "Enabled" : "Disabled"));
                Console.WriteLine("    4. Save");
                Console.WriteLine("    5. Back");

                res2 = Console.ReadLine();

                switch (res2)
                {
                    case "1":
                        Console.WriteLine("Enable notifications? (true/false)");
                        string notifs = Console.ReadLine();
                        active.Update("notifs", notifs);
                        break;
                    case "2":
                        Console.WriteLine("Enter refresh interval (in minutes):");
                        string refresh = Console.ReadLine();
                        active.Update("refresh", refresh);
                        break;
                    case "3":
                        Console.WriteLine("Show in calendar? (true/false)");
                        string showInCalendar = Console.ReadLine();
                        active.Update("showInCalendar", showInCalendar);
                        break;
                    case "4":
                        settings.Add(active);
                        active.Save();
                        break;
                }
            } while (res2 != "5");

        } while (res != "");
    }
}