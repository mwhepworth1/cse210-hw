using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.IO;
using System.Net;
using System.Threading;
/**
 * Utilities class to handle API requests and load API keys from a JSON file.
 * Generated by GitHub Copilot using GPT-4o.
 * Code is modified, but is not meant to be a class in the final project.
 */

public static class Utilities
{
    private static readonly HttpClient client = new HttpClient();

    public static async Task<ApiResponse> CanvasAPI(string method, string url, object payload = null)
    {
        // Load the API key from the JSON file
        string apiKey = LoadApiKey("apikey.json");

        // Set the Authorization header with the API key
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", apiKey);

        HttpResponseMessage response = null;

        try
        {
            if (method.ToLower() == "get")
            {
                // Send the GET request
                response = await client.GetAsync(url);
            }
            else if (method.ToLower() == "post")
            {
                // Serialize the payload to JSON
                string jsonPayload = JsonConvert.SerializeObject(payload);
                var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

                // Send the POST request
                response = await client.PostAsync(url, content);
            }
            else
            {
                throw new ArgumentException("Invalid HTTP method specified. Only 'get' and 'post' are supported.");
            }

            response.EnsureSuccessStatusCode(); // Throw if not a success code

            // Read the response content
            string responseBody = await response.Content.ReadAsStringAsync();

            // Return the custom response object
            return new ApiResponse
            {
                Body = responseBody,
                Headers = response.Headers,
                StatusCode = response.StatusCode
            };
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Request error: {e.Message}");
            return null;
        }
    }

    private static string LoadApiKey(string filePath)
    {
        // Read the API key from the JSON file
        if (!File.Exists(filePath))
        {
            throw new FileNotFoundException("API key file not found.", filePath);
        }

        dynamic json = JsonConvert.DeserializeObject(File.ReadAllText(filePath));
        return json.key;
    }
}
public class ApiResponse
{
    public string Body { get; set; }
    public HttpResponseHeaders Headers { get; set; }
    public HttpStatusCode StatusCode { get; set; }
}

// Generated by GitHub Copilot using GPT-4o.
public static class TimerUtility
{
    public static void SetTimeout(Action callback, int delayMilliseconds)
    {
        Timer timer = null;
        timer = new Timer(_ =>
        {
            callback();
            timer.Dispose(); // Clean up the timer after the callback is executed
        }, null, delayMilliseconds, Timeout.Infinite);
    }

    public static void SetTimeout<T>(Action<T> callback, T data, int delayMilliseconds)
    {
        Timer timer = null;
        timer = new Timer(_ =>
        {
            callback(data);
            timer.Dispose(); // Clean up the timer after the callback is executed
        }, null, delayMilliseconds, Timeout.Infinite);
    }
}